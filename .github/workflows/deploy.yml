name: Deploy CappsDapr to Azure Container Apps
concurrency: capps-dapr

on:    
  push:
    branches:
      - deploy
    paths:
      - 'components/**'
      - 'deploy/**'
      - 'src/**'
      - '.github/workflows/**'

env:
    # Specify your resource group's name
    RESOURCE_GROUP_NAME: cappsdapr

    # Specify your preferred region
    LOCATION: westeurope

    BACKEND_DOCKER: MyBackEnd/Dockerfile
    BACKEND_IMAGE: backend

    FRONTEND_DOCKER: MyFrontEnd/Dockerfile
    FRONTEND_IMAGE: frontend

jobs:
  provision:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout branch 
        uses: actions/checkout@v2
        
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SPN }}

      - name: Create resource group
        uses: azure/CLI@v1
        with:
          inlineScript: >
            echo "Creating resource group in Azure"
            echo "Executing 'az group create -l ${{ env.LOCATION }} -n ${{ env.RESOURCE_GROUP_NAME }}'"
            
            az group create -l ${{ env.LOCATION }} -n ${{ env.RESOURCE_GROUP_NAME }}

      - name: Deploy Bicep template  
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
          template: ./deploy/main.bicep

  build:
    runs-on: ubuntu-latest
    needs: provision
    
    steps:

    - name: Checkout to the branch
      uses: actions/checkout@v2

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SPN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to ACR
      run: |
        set -euo pipefail
        access_token=$(az account get-access-token --query accessToken -o tsv)
        refresh_token=$(curl https://${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io/oauth2/exchange -v -d "grant_type=access_token&service=${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io&access_token=$access_token" | jq -r .refresh_token)
        docker login -u 00000000-0000-0000-0000-000000000000 --password-stdin ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io <<< "$refresh_token"

    - name: Build the backend api image and push it to ACR
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
        file: ${{ env.BACKEND_DOCKER }}

    - name: Build the frontend image and push it to ACR
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
        file: ${{ env.FRONTEND_DOCKER }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:

    - name: Checkout to the branch
      uses: actions/checkout@v2

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SPN }}

    - name: Installing Container Apps extension
      uses: azure/CLI@v1
      with:
        inlineScript: >
          az config set extension.use_dynamic_install=yes_without_prompt

          az extension add --name containerapp


    - name: Login to ACR
      run: |
        set -euo pipefail
        access_token=$(az account get-access-token --query accessToken -o tsv)
        refresh_token=$(curl https://${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io/oauth2/exchange -v -d "grant_type=access_token&service=${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io&access_token=$access_token" | jq -r .refresh_token)
        docker login -u 00000000-0000-0000-0000-000000000000 --password-stdin ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io <<< "$refresh_token"

    - name: Deploy Container Apps
      uses: azure/CLI@v1
      with:
        inlineScript: >
          az containerapp registry set -n backend -g ${{ env.RESOURCE_GROUP_NAME }} --server ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io

          az containerapp update -n backend -g ${{ env.RESOURCE_GROUP_NAME }} -i ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io/${{ env.BACKEND_IMAGE }}:${{ github.sha }}

          az containerapp registry set -n frontend -g ${{ env.RESOURCE_GROUP_NAME }} --server ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io

          az containerapp update -n frontend -g ${{ env.RESOURCE_GROUP_NAME }} -i ${{ env.RESOURCE_GROUP_NAME }}acr.azurecr.io/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

    - name: logout
      run: >
        az logout